package org.parthvnp.Array;

import java.util.*;

public class ThreeSum {

    public List<List<Integer>> threeSumTwoPointers(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        // we will first sort the array to make the search easier
        Arrays.sort(nums);
        // next we will search for the complement of the current number in the array using two sum
        // the search is terminated once we encounter a positive value as nums[j: nums.length - 1] will be positive
        // the search also skips duplicate values
        for(int i = 0; i < nums.length && nums[i] <= 0; i++){
            if(i == 0 || nums[i-1] != nums[i]) twoSum(nums, i, res);
        }
        return res;
    }

    public void twoSum(int[] nums, int left, List<List<Integer>> res) {
        // we use two sum search strategy to search for the complement starting from left to nums.length - 1
        int low = left + 1, high = nums.length - 1;
        while (low < high) {
            int sum = nums[left] + nums[low] + nums[high];
            // if sum is greater than 0 we bring down high
            if(sum > 0) high--;
            // if sum is less than 0, we bring up low
            else if(sum < 0) low++;
            // if sum is 0, we add the triplet to the res and then try eliminating the duplicates by continually increasing
            else{
                res.add(Arrays.asList(nums[left], nums[low++], nums[high--]));
                while(low < high && nums[low] == nums[low - 1]) low++;
            }
            // low till it's a different value. There is no need to do this for high because the triplet generated by i, low and high
            // will be different once low changes
        }
    }

    public List<List<Integer>> threeSumNoSort(int[] nums) {
        Set<List<Integer>> res = new HashSet<>();
        // duplicates avoids processing duplicates we have already encountered
        Set<Integer> duplicates = new HashSet<>();
        // a hash map to see if a complement is a viable option for the current iteration
        HashMap<Integer, Integer> seen = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            // only if this number has not been processed continue the search for its complement. Essentially if
            // number k then in the inner loop we have searched for all numbers that add up to -k. So now there is
            // no need to search for numbers that add up to -k again.
            if (duplicates.add(i)) {
                for (int j = i + 1; j < nums.length; j++) {
                    // the number we will be looking for
                    int complement = -nums[i] - nums[j];
                    // we have encountered the complement when going through nums[i+1: nums.length]
                    if (seen.containsKey(complement) && seen.get(complement) == i) {
                        // now we have the triplet we are looking for
                        List<Integer> triplet = Arrays.asList(nums[i], nums[j], complement);
                        // we need to sort this triplet and store it in res
                        Collections.sort(triplet);
                        res.add(triplet);
                    }
                    seen.put(nums[j], i);
                }
            }
        }
        return new ArrayList<>(res);
    }

    public static void main(String[] args) {
        var s = new ThreeSum();
        int[] nums = {-1, 0, 1, 2, -1, -4};
        var e1 = s.threeSumTwoPointers(nums);
        System.out.println(e1);
        System.out.println(e1.equals(Arrays.asList(Arrays.asList(-1, -1, 2), Arrays.asList(-1, 0, 1))));

    }
}
